package com.capgemini.middleware.domain.blockchain.generated;

import io.reactivex.Flowable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.5.0.
 */
@SuppressWarnings("rawtypes")
public class CertToken extends Contract {
    public static final String BINARY = "608060405234801562000010575f80fd5b506040518060400160405280600981526020016821b2b93a2a37b5b2b760b91b81525060405180604001604052806005815260200164435478303160d81b815250815f908162000061919062000203565b50600162000070828262000203565b506200008191505f905033620000c2565b620000ad7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633620000c2565b620000bc600c80546001019055565b620002cf565b5f828152600b602090815260408083206001600160a01b038516845290915290205460ff1662000161575f828152600b602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620001203390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b634e487b7160e01b5f52604160045260245ffd5b600181811c908216806200018e57607f821691505b602082108103620001ad57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115620001fe57805f5260205f20601f840160051c81016020851015620001da5750805b601f840160051c820191505b81811015620001fb575f8155600101620001e6565b50505b505050565b81516001600160401b038111156200021f576200021f62000165565b620002378162000230845462000179565b84620001b3565b602080601f8311600181146200026d575f8415620002555750858301515b5f19600386901b1c1916600185901b178555620002c7565b5f85815260208120601f198616915b828110156200029d578886015182559484019460019091019084016200027c565b5085821015620002bb57878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b6126d180620002dd5f395ff3fe608060405234801561000f575f80fd5b5060043610610187575f3560e01c80636352211e116100d9578063a22cb46511610093578063d53913931161006e578063d539139314610362578063d547741f14610389578063e985e9c51461039c578063eca81d42146103d7575f80fd5b8063a22cb46514610329578063b88d4fde1461033c578063c87b56dd1461034f575f80fd5b80636352211e146102c157806370a08231146102d45780638d6fdcae146102e757806391d148541461030757806395d89b411461031a578063a217fddf14610322575f80fd5b8063248a9ca31161014457806336568abe1161011f57806336568abe1461027557806342842e0e1461028857806342966c681461029b5780634f6ccce7146102ae575f80fd5b8063248a9ca31461022d5780632f2ff15d1461024f5780632f745c5914610262575f80fd5b806301ffc9a71461018b57806306fdde03146101b3578063081812fc146101c8578063095ea7b3146101f357806318160ddd1461020857806323b872dd1461021a575b5f80fd5b61019e610199366004611f2c565b6103ea565b60405190151581526020015b60405180910390f35b6101bb6103fa565b6040516101aa9190611f94565b6101db6101d6366004611fa6565b610489565b6040516001600160a01b0390911681526020016101aa565b610206610201366004611fd8565b6104ae565b005b6008545b6040519081526020016101aa565b610206610228366004612000565b6105c7565b61020c61023b366004611fa6565b5f908152600b602052604090206001015490565b61020661025d366004612039565b6105f9565b61020c610270366004611fd8565b61061d565b610206610283366004612039565b6106b1565b610206610296366004612000565b61072f565b6102066102a9366004611fa6565b610749565b61020c6102bc366004611fa6565b61077a565b6101db6102cf366004611fa6565b61080a565b61020c6102e2366004612063565b610869565b6102fa6102f5366004612121565b6108ed565b6040516101aa9190612153565b61019e610315366004612039565b610915565b6101bb61093f565b61020c5f81565b610206610337366004612196565b61094e565b61020661034a3660046121cf565b610959565b6101bb61035d366004611fa6565b610991565b61020c7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b610206610397366004612039565b61099c565b61019e6103aa366004612246565b6001600160a01b039182165f90815260056020908152604080832093909416825291909152205460ff1690565b6102066103e536600461226e565b6109c0565b5f6103f482610a61565b92915050565b60605f8054610408906122dd565b80601f0160208091040260200160405190810160405280929190818152602001828054610434906122dd565b801561047f5780601f106104565761010080835404028352916020019161047f565b820191905f5260205f20905b81548152906001019060200180831161046257829003601f168201915b5050505050905090565b5f61049382610a85565b505f908152600460205260409020546001600160a01b031690565b5f6104b88261080a565b9050806001600160a01b0316836001600160a01b03160361052a5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610546575061054681336103aa565b6105b85760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610521565b6105c28383610ae3565b505050565b6105d2335b82610b50565b6105ee5760405162461bcd60e51b815260040161052190612315565b6105c2838383610bcd565b5f828152600b602052604090206001015461061381610d3c565b6105c28383610d46565b5f61062783610869565b82106106895760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610521565b506001600160a01b03919091165f908152600660209081526040808320938352929052205490565b6001600160a01b03811633146107215760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610521565b61072b8282610dcb565b5050565b6105c283838360405180602001604052805f815250610959565b610752336105cc565b61076e5760405162461bcd60e51b815260040161052190612315565b61077781610e31565b50565b5f61078460085490565b82106107e75760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610521565b600882815481106107fa576107fa612362565b905f5260205f2001549050919050565b5f818152600260205260408120546001600160a01b0316806103f45760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610521565b5f6001600160a01b0382166108d25760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610521565b506001600160a01b03165f9081526003602052604090205490565b60606103f4600d836040516109029190612376565b9081526020016040518091039020610f32565b5f918252600b602090815260408084206001600160a01b0393909316845291905290205460ff1690565b606060018054610408906122dd565b61072b338383610f45565b6109633383610b50565b61097f5760405162461bcd60e51b815260040161052190612315565b61098b84848484611012565b50505050565b60606103f482611045565b5f828152600b60205260409020600101546109b681610d3c565b6105c28383610dcb565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66109ea81610d3c565b5f6109f4600c5490565b9050610a04600c80546001019055565b610a0e8582611147565b610a188184611160565b5f818152600e60205260409020610a2f85826123d5565b50610a5981600d86604051610a449190612376565b908152604051908190036020019020906111f1565b505050505050565b5f6001600160e01b03198216637965db0b60e01b14806103f457506103f4826111fc565b5f818152600260205260409020546001600160a01b03166107775760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610521565b5f81815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610b178261080a565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b5f80610b5b8361080a565b9050806001600160a01b0316846001600160a01b03161480610ba157506001600160a01b038082165f9081526005602090815260408083209388168352929052205460ff165b80610bc55750836001600160a01b0316610bba84610489565b6001600160a01b0316145b949350505050565b826001600160a01b0316610be08261080a565b6001600160a01b031614610c065760405162461bcd60e51b815260040161052190612491565b6001600160a01b038216610c685760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610521565b610c758383836001611220565b826001600160a01b0316610c888261080a565b6001600160a01b031614610cae5760405162461bcd60e51b815260040161052190612491565b5f81815260046020908152604080832080546001600160a01b03199081169091556001600160a01b038781168086526003855283862080545f1901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b610777813361122c565b610d508282610915565b61072b575f828152600b602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610d873390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610dd58282610915565b1561072b575f828152600b602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b5f818152600e602052604081208054610e49906122dd565b90501115610f29575f818152600e602052604081208054610e69906122dd565b80601f0160208091040260200160405190810160405280929190818152602001828054610e95906122dd565b8015610ee05780601f10610eb757610100808354040283529160200191610ee0565b820191905f5260205f20905b815481529060010190602001808311610ec357829003601f168201915b50505050509050610f1082600d83604051610efb9190612376565b90815260405190819003602001902090611285565b505f828152600e60205260408120610f2791611ecd565b505b61077781611290565b60605f610f3e836112ce565b9392505050565b816001600160a01b0316836001600160a01b031603610fa65760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610521565b6001600160a01b038381165f81815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61101d848484610bcd565b61102984848484611327565b61098b5760405162461bcd60e51b8152600401610521906124d6565b606061105082610a85565b5f828152600a602052604081208054611068906122dd565b80601f0160208091040260200160405190810160405280929190818152602001828054611094906122dd565b80156110df5780601f106110b6576101008083540402835291602001916110df565b820191905f5260205f20905b8154815290600101906020018083116110c257829003601f168201915b505050505090505f6110fb60408051602081019091525f815290565b905080515f0361110c575092915050565b81511561113e578082604051602001611126929190612528565b60405160208183030381529060405292505050919050565b610bc584611424565b61072b828260405180602001604052805f815250611493565b5f828152600260205260409020546001600160a01b03166111da5760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608401610521565b5f828152600a602052604090206105c282826123d5565b5f610f3e83836114c5565b5f6001600160e01b0319821663780e9d6360e01b14806103f457506103f482611511565b61098b84848484611560565b6112368282610915565b61072b576112438161169f565b61124e8360206116b1565b60405160200161125f929190612556565b60408051601f198184030181529082905262461bcd60e51b825261052191600401611f94565b5f610f3e8383611847565b6112998161192a565b5f818152600a6020526040902080546112b1906122dd565b159050610777575f818152600a6020526040812061077791611ecd565b6060815f0180548060200260200160405190810160405280929190818152602001828054801561131b57602002820191905f5260205f20905b815481526020019060010190808311611307575b50505050509050919050565b5f6001600160a01b0384163b1561141957604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061136a9033908990889088906004016125ca565b6020604051808303815f875af19250505080156113a4575060408051601f3d908101601f191682019092526113a191810190612606565b60015b6113ff573d8080156113d1576040519150601f19603f3d011682016040523d82523d5f602084013e6113d6565b606091505b5080515f036113f75760405162461bcd60e51b8152600401610521906124d6565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610bc5565b506001949350505050565b606061142f82610a85565b5f61144460408051602081019091525f815290565b90505f8151116114625760405180602001604052805f815250610f3e565b8061146c846119c9565b60405160200161147d929190612528565b6040516020818303038152906040529392505050565b61149d8383611a59565b6114a95f848484611327565b6105c25760405162461bcd60e51b8152600401610521906124d6565b5f81815260018301602052604081205461150a57508154600181810184555f8481526020808220909301849055845484825282860190935260409020919091556103f4565b505f6103f4565b5f6001600160e01b031982166380ac58cd60e01b148061154157506001600160e01b03198216635b5e139f60e01b145b806103f457506301ffc9a760e01b6001600160e01b03198316146103f4565b61156c84848484611bee565b60018111156115db5760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b6064820152608401610521565b816001600160a01b0385166116365761163181600880545f838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611659565b836001600160a01b0316856001600160a01b031614611659576116598582611c74565b6001600160a01b0384166116755761167081611d0d565b611698565b846001600160a01b0316846001600160a01b031614611698576116988482611db4565b5050505050565b60606103f46001600160a01b03831660145b60605f6116bf836002612635565b6116ca90600261264c565b67ffffffffffffffff8111156116e2576116e261207c565b6040519080825280601f01601f19166020018201604052801561170c576020820181803683370190505b509050600360fc1b815f8151811061172657611726612362565b60200101906001600160f81b03191690815f1a905350600f60fb1b8160018151811061175457611754612362565b60200101906001600160f81b03191690815f1a9053505f611776846002612635565b61178190600161264c565b90505b60018111156117f8576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106117b5576117b5612362565b1a60f81b8282815181106117cb576117cb612362565b60200101906001600160f81b03191690815f1a90535060049490941c936117f18161265f565b9050611784565b508315610f3e5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610521565b5f8181526001830160205260408120548015611921575f611869600183612674565b85549091505f9061187c90600190612674565b90508181146118db575f865f01828154811061189a5761189a612362565b905f5260205f200154905080875f0184815481106118ba576118ba612362565b5f918252602080832090910192909255918252600188019052604090208390555b85548690806118ec576118ec612687565b600190038181905f5260205f20015f90559055856001015f8681526020019081526020015f205f9055600193505050506103f4565b5f9150506103f4565b5f6119348261080a565b9050611943815f846001611220565b61194c8261080a565b5f83815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0385168085526003845282852080545f190190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60605f6119d583611df6565b60010190505f8167ffffffffffffffff8111156119f4576119f461207c565b6040519080825280601f01601f191660200182016040528015611a1e576020820181803683370190505b5090508181016020015b5f19016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084611a2857509392505050565b6001600160a01b038216611aaf5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610521565b5f818152600260205260409020546001600160a01b031615611b135760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610521565b611b205f83836001611220565b5f818152600260205260409020546001600160a01b031615611b845760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610521565b6001600160a01b0382165f81815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600181111561098b576001600160a01b03841615611c33576001600160a01b0384165f9081526003602052604081208054839290611c2d908490612674565b90915550505b6001600160a01b0383161561098b576001600160a01b0383165f9081526003602052604081208054839290611c6990849061264c565b909155505050505050565b5f6001611c8084610869565b611c8a9190612674565b5f83815260076020526040902054909150808214611cdb576001600160a01b0384165f9081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b505f9182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008545f90611d1e90600190612674565b5f8381526009602052604081205460088054939450909284908110611d4557611d45612362565b905f5260205f20015490508060088381548110611d6457611d64612362565b5f918252602080832090910192909255828152600990915260408082208490558582528120556008805480611d9b57611d9b612687565b600190038181905f5260205f20015f9055905550505050565b5f611dbe83610869565b6001600160a01b039093165f908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b5f8072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611e345772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611e60576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611e7e57662386f26fc10000830492506010015b6305f5e1008310611e96576305f5e100830492506008015b6127108310611eaa57612710830492506004015b60648310611ebc576064830492506002015b600a83106103f45760010192915050565b508054611ed9906122dd565b5f825580601f10611ee8575050565b601f0160209004905f5260205f209081019061077791905b80821115611f13575f8155600101611f00565b5090565b6001600160e01b031981168114610777575f80fd5b5f60208284031215611f3c575f80fd5b8135610f3e81611f17565b5f5b83811015611f61578181015183820152602001611f49565b50505f910152565b5f8151808452611f80816020860160208601611f47565b601f01601f19169290920160200192915050565b602081525f610f3e6020830184611f69565b5f60208284031215611fb6575f80fd5b5035919050565b80356001600160a01b0381168114611fd3575f80fd5b919050565b5f8060408385031215611fe9575f80fd5b611ff283611fbd565b946020939093013593505050565b5f805f60608486031215612012575f80fd5b61201b84611fbd565b925061202960208501611fbd565b9150604084013590509250925092565b5f806040838503121561204a575f80fd5b8235915061205a60208401611fbd565b90509250929050565b5f60208284031215612073575f80fd5b610f3e82611fbd565b634e487b7160e01b5f52604160045260245ffd5b5f67ffffffffffffffff808411156120aa576120aa61207c565b604051601f8501601f19908116603f011681019082821181831017156120d2576120d261207c565b816040528093508581528686860111156120ea575f80fd5b858560208301375f602087830101525050509392505050565b5f82601f830112612112575f80fd5b610f3e83833560208501612090565b5f60208284031215612131575f80fd5b813567ffffffffffffffff811115612147575f80fd5b610bc584828501612103565b602080825282518282018190525f9190848201906040850190845b8181101561218a5783518352928401929184019160010161216e565b50909695505050505050565b5f80604083850312156121a7575f80fd5b6121b083611fbd565b9150602083013580151581146121c4575f80fd5b809150509250929050565b5f805f80608085870312156121e2575f80fd5b6121eb85611fbd565b93506121f960208601611fbd565b925060408501359150606085013567ffffffffffffffff81111561221b575f80fd5b8501601f8101871361222b575f80fd5b61223a87823560208401612090565b91505092959194509250565b5f8060408385031215612257575f80fd5b61226083611fbd565b915061205a60208401611fbd565b5f805f60608486031215612280575f80fd5b61228984611fbd565b9250602084013567ffffffffffffffff808211156122a5575f80fd5b6122b187838801612103565b935060408601359150808211156122c6575f80fd5b506122d386828701612103565b9150509250925092565b600181811c908216806122f157607f821691505b60208210810361230f57634e487b7160e01b5f52602260045260245ffd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b634e487b7160e01b5f52603260045260245ffd5b5f8251612387818460208701611f47565b9190910192915050565b601f8211156105c257805f5260205f20601f840160051c810160208510156123b65750805b601f840160051c820191505b81811015611698575f81556001016123c2565b815167ffffffffffffffff8111156123ef576123ef61207c565b612403816123fd84546122dd565b84612391565b602080601f831160018114612436575f841561241f5750858301515b5f19600386901b1c1916600185901b178555610a59565b5f85815260208120601f198616915b8281101561246457888601518255948401946001909101908401612445565b508582101561248157878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b5f8351612539818460208801611f47565b83519083019061254d818360208801611f47565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081525f835161258d816017850160208801611f47565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516125be816028840160208801611f47565b01602801949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190525f906125fc90830184611f69565b9695505050505050565b5f60208284031215612616575f80fd5b8151610f3e81611f17565b634e487b7160e01b5f52601160045260245ffd5b80820281158282048414176103f4576103f4612621565b808201808211156103f4576103f4612621565b5f8161266d5761266d612621565b505f190190565b818103818111156103f4576103f4612621565b634e487b7160e01b5f52603160045260245ffdfea2646970667358221220bc479dbaf31cc7e5922c7c04f42c343cb6a91a8b4723fd43d63da4e60801465f64736f6c63430008160033";

    public static final String FUNC_DEFAULT_ADMIN_ROLE = "DEFAULT_ADMIN_ROLE";

    public static final String FUNC_MINTER_ROLE = "MINTER_ROLE";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_CERTIFICANTTOKENIDS = "certificantTokenIds";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETROLEADMIN = "getRoleAdmin";

    public static final String FUNC_GRANTROLE = "grantRole";

    public static final String FUNC_HASROLE = "hasRole";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_RENOUNCEROLE = "renounceRole";

    public static final String FUNC_REVOKEROLE = "revokeRole";

    public static final String FUNC_SAFEMINT = "safeMint";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENBYINDEX = "tokenByIndex";

    public static final String FUNC_TOKENOFOWNERBYINDEX = "tokenOfOwnerByIndex";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final Event APPROVAL_EVENT = new Event("Approval",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Uint256>(true) {
            }));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Bool>() {
            }));
    ;

    public static final Event ROLEADMINCHANGED_EVENT = new Event("RoleAdminChanged",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {
            }, new TypeReference<Bytes32>(true) {
            }, new TypeReference<Bytes32>(true) {
            }));
    ;

    public static final Event ROLEGRANTED_EVENT = new Event("RoleGranted",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }));
    ;

    public static final Event ROLEREVOKED_EVENT = new Event("RoleRevoked",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Uint256>(true) {
            }));
    ;

    @Deprecated
    protected CertToken(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CertToken(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CertToken(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CertToken(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }


    public static ApprovalEventResponse getApprovalEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVAL_EVENT, log);
        ApprovalEventResponse typedResponse = new ApprovalEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalEventFromLog(log));
    }

    public static ApprovalForAllEventResponse getApprovalForAllEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, log);
        ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalForAllEventFromLog(log));
    }


    public static RoleAdminChangedEventResponse getRoleAdminChangedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ROLEADMINCHANGED_EVENT, log);
        RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
        typedResponse.log = log;
        typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRoleAdminChangedEventFromLog(log));
    }


    public static RoleGrantedEventResponse getRoleGrantedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ROLEGRANTED_EVENT, log);
        RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
        typedResponse.log = log;
        typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRoleGrantedEventFromLog(log));
    }

    public static RoleRevokedEventResponse getRoleRevokedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ROLEREVOKED_EVENT, log);
        RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
        typedResponse.log = log;
        typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRoleRevokedEventFromLog(log));
    }


    public static TransferEventResponse getTransferEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFER_EVENT, log);
        TransferEventResponse typedResponse = new TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferEventFromLog(log));
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> DEFAULT_ADMIN_ROLE() {
        final Function function = new Function(FUNC_DEFAULT_ADMIN_ROLE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {
                }));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> MINTER_ROLE() {
        final Function function = new Function(FUNC_MINTER_ROLE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {
                }));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_APPROVE,
                Arrays.<Type>asList(new Address(160, to),
                        new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final Function function = new Function(FUNC_BALANCEOF,
                Arrays.<Type>asList(new Address(160, owner)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> burn(BigInteger tokenId) {
        final Function function = new Function(
                FUNC_BURN,
                Arrays.<Type>asList(new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> certificantTokenIds(String certificant) {
        final Function function = new Function(FUNC_CERTIFICANTTOKENIDS,
                Arrays.<Type>asList(new Utf8String(certificant)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {
                }));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final Function function = new Function(FUNC_GETAPPROVED,
                Arrays.<Type>asList(new Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<byte[]> getRoleAdmin(byte[] role) {
        final Function function = new Function(FUNC_GETROLEADMIN,
                Arrays.<Type>asList(new Bytes32(role)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {
                }));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> grantRole(byte[] role, String account) {
        final Function function = new Function(
                FUNC_GRANTROLE,
                Arrays.<Type>asList(new Bytes32(role),
                        new Address(160, account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> hasRole(byte[] role, String account) {
        final Function function = new Function(FUNC_HASROLE,
                Arrays.<Type>asList(new Bytes32(role),
                        new Address(160, account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final Function function = new Function(FUNC_ISAPPROVEDFORALL,
                Arrays.<Type>asList(new Address(160, owner),
                        new Address(160, operator)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final Function function = new Function(FUNC_OWNEROF,
                Arrays.<Type>asList(new Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceRole(byte[] role, String account) {
        final Function function = new Function(
                FUNC_RENOUNCEROLE,
                Arrays.<Type>asList(new Bytes32(role),
                        new Address(160, account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeRole(byte[] role, String account) {
        final Function function = new Function(
                FUNC_REVOKEROLE,
                Arrays.<Type>asList(new Bytes32(role),
                        new Address(160, account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeMint(String to, String certificant, String uri) {
        final Function function = new Function(
                FUNC_SAFEMINT,
                Arrays.<Type>asList(new Address(160, to),
                        new Utf8String(certificant),
                        new Utf8String(uri)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_safeTransferFrom,
                Arrays.<Type>asList(new Address(160, from),
                        new Address(160, to),
                        new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] data) {
        final Function function = new Function(
                FUNC_safeTransferFrom,
                Arrays.<Type>asList(new Address(160, from),
                        new Address(160, to),
                        new Uint256(tokenId),
                        new org.web3j.abi.datatypes.DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL,
                Arrays.<Type>asList(new Address(160, operator),
                        new Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> tokenByIndex(BigInteger index) {
        final Function function = new Function(FUNC_TOKENBYINDEX,
                Arrays.<Type>asList(new Uint256(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> tokenOfOwnerByIndex(String owner, BigInteger index) {
        final Function function = new Function(FUNC_TOKENOFOWNERBYINDEX,
                Arrays.<Type>asList(new Address(160, owner),
                        new Uint256(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final Function function = new Function(FUNC_TOKENURI,
                Arrays.<Type>asList(new Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_TRANSFERFROM,
                Arrays.<Type>asList(new Address(160, from),
                        new Address(160, to),
                        new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static CertToken load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CertToken(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CertToken load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CertToken(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CertToken load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CertToken(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CertToken load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CertToken(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CertToken> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(CertToken.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<CertToken> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(CertToken.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<CertToken> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(CertToken.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<CertToken> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(CertToken.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class RoleAdminChangedEventResponse extends BaseEventResponse {
        public byte[] role;

        public byte[] previousAdminRole;

        public byte[] newAdminRole;
    }

    public static class RoleGrantedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class RoleRevokedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
